package org.aistomin.chat.model

import grails.persistence.Entity
import groovy.transform.EqualsAndHashCode
import groovy.transform.ToString

/**
 * User entity.
 */
@Entity
@EqualsAndHashCode(includes = 'username')
@ToString(includes = 'username', includeNames = true, includePackage = false)
class UserRecord {

    private static final long serialVersionUID = 1

    transient springSecurityService

    /**
     * User's display name.
     */
    String name = "User${System.currentTimeMillis()}"

    /**
     * User's username.
     */
    String username

    /**
     * Authentication password.
     */
    String password

    /**
     * Is user online now?
     */
    Boolean isOnline = false

    /**
     * Generated by Spring Security.
     */
    boolean enabled = true

    /**
     * Generated by Spring Security.
     */
    boolean accountExpired

    /**
     * Generated by Spring Security.
     */
    boolean accountLocked

    /**
     * Generated by Spring Security.
     */
    boolean passwordExpired

    UserRecord(final String username, final String password) {
        this()
        this.username = username
        this.password = password
    }

    Set<UserRoleRecord> getAuthorities() {
        UserRecordUserRoleRecord.findAllByUserRecord(this)*.userRoleRecord
    }

    def beforeInsert() {
        encodePassword()
    }

    def beforeUpdate() {
        if (isDirty('password')) {
            encodePassword()
        }
    }

    protected void encodePassword() {
        password = springSecurityService?.passwordEncoder ?
            springSecurityService.encodePassword(password) : password
    }

    static transients = ['springSecurityService']

    static constraints = {
        name blank: false, maxSize: 20
        username blank: false, unique: true, maxSize: 15
        password blank: false
    }

    static mapping = {
        password column: '`password`'
    }
}
